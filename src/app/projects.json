[
    {
        "image": "/book-search-react-hooks.jpg",
        "applink": "https://book-search-react-hooks.herokuapp.com",
        "githublink": "https://github.com/marciamoss/book-search-react-hooks",
        "title": "React Hooks Book Search",
        "overview": "React based app for google book search Search page: User searches for books via the Google Books API and the search results is rendered here. User has the option to 'View' a book which brings them to the book on Google Books.",
        "techonologies": "React, React/hooks, Google Books API, Axios, Javascript, Semantic-ui"
    },
    {
        "image": "/sipSpot.gif",
        "applink": "https://sipspot.herokuapp.com/",
        "githublink": "https://github.com/charlesmbrady/Project3",
        "title": "sipSpot",
        "overview": "sipSpot uses geolocation and a simple click of a button to keep track of both where your things are, and your alcohol intake, when you're out on the town. When you click +Drink, sipSpot keeps track of the number of drinks you've had and the timeframe in which you've had them to constantly update an estimate of your Blood Alcohol Concentration (BAC).",
        "techonologies": "React, Node, Express, Geolocation API, Axios, Javascript, Twillio" 
    }, 
    {
        "image": "/goTreeUrself.jpg",
        "applink": "https://gotreeurself.herokuapp.com/",
        "githublink": "https://github.com/ralracish/goTreeUrself",         
        "title": "goTreeUrself",
        "overview": "goTreeUrself is a site promoting the importance of planting trees to help renew resources lost to mass deforestation. Encouraging people to plant a tree clearly has value but, for most people, it is an abstract idea. By putting 'pins' on a map showing where others have planted trees, goTreeUrself encourages participation and lets users show the world trees they care about - either ones they have planted or ones that are important in their lives.",
        "techonologies": "Node, Handlebars, Sequelize, mySQL2, JawsDB, Google Maps, Filestack, Foundation and CSS Grid." 
    }, 
    {
        "image": "/React_Google_Book_Search.jpg",
        "applink": "https://fathomless-wildwood-49554.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/React-Google-Book-Search",         
        "title": "React Google Book Search",
        "overview": "React based app for google book search Search page: User searches for books via the Google Books API and the search results is rendered here. User has the option to 'View' a book which brings them to the book on Google Books, or 'Save' a book which saves it to the Mongo database. Saved page: Renders all books saved to the Mongo database. User has an option to 'View' the book, bringing them to the book on Google Books, or 'Delete' a book, removing it from the Mongo database.",
        "techonologies": "React, Node, Express, Google Books API, Axios, Javascript, Bootstrap" 
    },
    {
        "image": "/ReactMongoScraper.jpg",
        "applink": "https://react-newsscraper.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/React-MongoScrape",         
        "title": "React Mongo Scraper",
        "overview": "A web app that lets users view and leave comments on the latest news scraped using Mongoose and Cheerio from https://www.nytimes.com.Users can leave comments on the articles displayed and can revisit them later. The comments are saved to the database as well and associated with their articles. Users can also delete comments left on articles. All stored comments are visible to every user. All scraped stories are unique and no duplicates are saved.",
        "techonologies": "React, Node, Express, Cheerios, Axios, Javascript, Bootstrap" 
    },
    {
        "image": "/MongoScraper.jpg",
        "applink": "https://powerful-caverns-28906.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/mongoscrape",         
        "title": "Handlebars Scraper",
        "overview": "A web app that lets users view and leave comments on the latest news scraped using Mongoose and Cheerio from https://www.nytimes.com.Users can leave comments on the articles displayed and can revisit them later. The comments are saved to the database as well and associated with their articles. Users can also delete comments left on articles. All stored comments are visible to every user. All scraped stories are unique and no duplicates are saved.",
        "techonologies": "Handlebars, Node, Express, Cheerios, Axios, Javascript, Jquery, Bootstrap" 
    },
    {
        "image": "/ClimbingStairs.jpg",
        "applink": "https://climbing-stairs.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/climbing-stairs",
        "title": "Climbing Stairs",
        "overview": "A Climbing Stairs combination calculator built on react. The app takes in total number of steps as a positive integer and calculate number of ways you can get to the top using 1 or 2 steps at a time.",
        "techonologies": "React, Javascript"

    },
    {
        "image": "/TipCalculator.jpg",
        "applink": "https://react-tip-calculator.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/TipCalculator",         
        "title": "Tip Calculator",
        "overview": "A tip calculator built on react. The app takes in the value of the bill and displays the tip options. The user can pick the predefined tip options or pick their own tip option using custom button. The custom tip option has two input either custom tip amount in dollars or custom tip amount in %. Depending on the user selection the app displays the bill amount, tip amount and total of both bill and tip together. The user has the option to split the bill by adding the number of people. When split option is selected, the bill, tip and total is displayed for each person.",
        "techonologies": "React, Javascript" 

    },
    {
        "image": "/react-clicky-game.jpg",
        "applink": "https://marciamoss.github.io/React-Clicky_Game",
        "githublink": "https://github.com/marciamoss/React-Clicky_Game",         
        "title": "React Clicky Game",
        "overview": "This app is a memory game with React.js. The user's score is incremented when clicking an image for the first time. The user's score resets to 0 if they click the same image more than once. Every time an image is clicked, the images rendered to the page shuffles themselves in a random order. Once the user's score is reset after an incorrect guess, the game restarts. The top score keeps track of the maximum score achieved by the user throughout all games during that session.",
        "techonologies": "React, Javascript" 
    },
    {
        "image": "/SequelizedBurger.jpg",
        "applink": "https://damp-plains-34136.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/sequelizedBurger",         
        "title": "Sequelized Burger",
        "overview": "Burger app is a restaurant app that lets users input the names of burgers they'd like to eat. Whenever a user submits a burger's name, the app will display the burger on the left side of the page along with a text box for user name entry-- waiting to be devoured. Each burger in the waiting area also has a devour It! button. When the user clicks it, the burger will move to the right side of the page. App has a Customer association table. This involved creating one new Customer model and connecting it with the Burger model. The app will store every burger in a database, whether devoured or not along with user associations.",
        "techonologies": "Javascript, Sequelize, Sequelize associations, Node, Express and Handlebars"
    },
    {
        "image": "/burger.jpg",
        "applink": "https://salty-garden-86325.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/burger",         
        "title": "Eat Da Burger",
        "overview": "Burger app is a restaurant app that lets users input the names of burgers they'd like to eat. Whenever a user submits a burger's name, the app will display the burger on the left side of the page -- waiting to be devoured. Each burger in the waiting area also has a devour It! button. When the user clicks it, the burger will move to the right side of the page. The app will store every burger in a database, whether devoured or not.",
        "techonologies": "Javascript, Node, Express, Handlebars, MySQL"
    },
    {
        "image": "/bamazon.gif",
        "applink": "https://github.com/marciamoss/bamazon",
        "githublink": "https://github.com/marciamoss/bamazon",         
        "title": "Bamazon",
        "overview": "Bamazon is an Amazon-like storefront created with the MySQL skills. There are three views built in this app: bamazonCustomer view, bamazonManager view and bamazonSupervisor view. The video Links demonstrates how each view operates.",
        "techonologies": "Javascript, Node, MySQL"
    },
    {
        "image": "/constructor_wordgame.gif",
        "applink": "https://github.com/marciamoss/Constructor-Word-Guess",
        "githublink": "https://github.com/marciamoss/Constructor-Word-Guess",         
        "title": "Constructor Word Guess",
        "overview": "A Constructor based node.js version of hangman game.  The video Links demonstrates how the game operates.", 
        "techonologies": "Javascript, Node, Inquirer"
    },
    {
        "image": "/liri.gif",
        "applink": "https://github.com/marciamoss/liri-node-app",
        "githublink": "https://github.com/marciamoss/liri-node-app",         
        "title": "Liri Node.js",
        "overview": "LIRI is a Language Interpretation and Recognition Interface. LIRI is a command line node app that takes in parameters and gives you back data. LIRI will search Spotify for songs, Bands in Town for concerts, and OMDB for movies. The video Links demonstrates how it operates.",
        "techonologies": "Javascript, Node, Inquirer, Spotify API, OMDB api, Bands in town API, Axios"
    },
    {
        "image": "/FriendFinder.jpg",
        "applink": "https://blooming-woodland-51958.herokuapp.com/",
        "githublink": "https://github.com/marciamoss/FriendFinder",         
        "title": "Friend Finder",
        "overview": "A dating app which is compatibility-based 'FriendFinder' application. This is a full-stack site which takes in results from user's surveys, then compares their answers with those from other users. The app will then display the name and picture of the user with the best overall match. The app uses Express to handle routing.",
        "techonologies": "Javascript, Bootstrap, Jquery, Express"
    },
    {
        "image": "/Train_Activity.jpg",
        "applink": "https://marciamoss.github.io/Train_Activity/",
        "githublink": "https://github.com/marciamoss/Train_Activity",         
        "title": "Train Activity",
        "overview": "A train schedule application that incorporates Firebase to host arrival and departure data. The app retrieves and manipulates the information with Moment.js. This website provides up-to-date information about various trains, namely their arrival times and how many minutes remain until they arrive at their station. When adding trains, administrators can submit the following: Train Name, Destination, First Train Time -- in military time, Frequency -- in minutes, This app calculates when the next train will arrive. This is relative to the current time. Users from many different machines can view same train times. The 'minutes to arrival' and 'next train time' text updates once every minute.",
        "techonologies": "Javascript, Moment.js, Bootstrap, Jquery, Firebase"
    },
    {
        "image": "/RPS-Multiplayer.jpg",
        "applink": "https://marciamoss.github.io/RPS-Multiplayer/",
        "githublink": "https://github.com/marciamoss/RPS-Multiplayer",         
        "title": "RPS Multiplayer",
        "overview": "Online multiplayer Rock Paper Scissors game. Uses Firebase for data storge.",
        "techonologies": "Javascript, Bootstrap, Jquery, Firebase"
    },
    {
        "image": "/GifTastic.jpg",
        "applink": "https://marciamoss.github.io/GifTastic/",
        "githublink": "https://github.com/marciamoss/GifTastic",         
        "title": "GifTastic",
        "overview": "This application uses the GIPHY API to make a dynamic web page that populates with gifs of users choice. When the user clicks on a button, the page grabs 10 static, non-animated gif images from the GIPHY API and places them on the page. When the user clicks one of the still GIPHY images, the gif animates. If the user clicks the gif again, it stops playing. Under every gif, displayed is its rating 'Add a bird' takes the value from the user input and adds the button for that corresponding topic on the page. App is fully mobile responsive. 'Load 10 more Gif's button' allows users to request additional gifs to be added to the page. Each request ADDs 10 gifs to the page upto 400 for one particular topic. Users can add their favorite gifs to a favorites section by clicking the HEART icon under the image.",
        "techonologies": "Javascript, Bootstrap, Jquery, Giphy API"
    },
    {
        "image": "/Trivia_game.jpg",
        "applink": "https://marciamoss.github.io/TriviaGame/",
        "githublink": "https://github.com/marciamoss/TriviaGame",         
        "title": "Trivia Game",
        "overview": "Trivia game that shows only one question until the player answers it or their time runs out. If the player selects the correct answer, the screen changes congratulating them for choosing the right option. After a few seconds, displays the next question -- without user input. The scenario is similar for wrong answers and time-outs. If the player runs out of time, the screen shows that time's up and displays the correct answer. Waits a few seconds, then shows the next question. If the player chooses the wrong answer, the screen shows that the player selected the wrong option and displays the correct answer. Waits a few seconds, then show the next question. On the final screen shows the number of correct answers, incorrect answers, and an option to restart the game.",
        "techonologies": "Javascript, Bootstrap, Jquery"
    },
    {
        "image": "/StarwarsRPG.jpg",
        "applink": "https://marciamoss.github.io/Star-Wars-RPG-Game/",
        "githublink": "https://github.com/marciamoss/Star-Wars-RPG-Game",         
        "title": "Starwars RPG Game",
        "overview": "Once the player clicks on the available characters the player takes on the role of that character. Rest become the enemies the player needs to defeat. Each character in the game has 3 attributes: Health Points, Attack Power and Counter Attack Power. Each time the player attacks, their character's Attack Power increases by its base Attack Power. For example, if the base Attack Power is 6, each attack will increase the Attack Power by 6 (12, 18, 24, 30 and so on). The enemy character only has Counter Attack Power. Unlike the player's Attack Points, Counter Attack Power never changes. No characters in the game can heal or recover Health Points. A winning player must pick their characters wisely by first fighting an enemy with low Counter Attack Power. This will allow them to grind Attack Power and to take on enemies before they lose all of their Health Points. The challenge comes from picking the right enemies, not choosing the strongest player.",
        "techonologies": "Javascript, Bootstrap, Jquery"
    },
    {
        "image": "/crystalscollector.jpg",
        "applink": "https://marciamoss.github.io/unit-4-game/",
        "githublink": "https://github.com/marciamoss/unit-4-game",         
        "title": "Crystals Game",
        "overview": "There will be four crystals displayed as buttons on the page. The player will be shown a random number at the start of the game. When the player clicks on a crystal, it will add a specific amount of points to the player's total score. The game will hide this amount until the player clicks a crystal. When they do click one, the player's score counter is updated. The player wins if their total score matches the random number from the beginning of the game. The player loses if their score goes above the random number. The game restarts whenever the player wins or loses. When the game begins again, the player should see a new random number. Also, all the crystals will have four new hidden values. The user's score (and score counter) will reset to zero. The app shows the number of games the player wins and loses. If the page is refreshed the game is restarted from the begining.",
        "techonologies": "Javascript, Bootstrap, Jquery"
    },
    {
        "image": "/wordguess.jpg",
        "applink": "https://marciamoss.github.io/Word-Guess-Game/",
        "githublink": "https://github.com/marciamoss/Word-Guess-Game",         
        "title": "Word Guess Game",
        "overview": "A hangman game where the player has 10 guesses to get the word right. The guess goes down each time a letter is clicked. If the letter is part of the word it dispalys at the location it originally is.. The count does not change if the player picks the same letter twice or the letter is part of the word. Different Audio plays each for winning and losing.",
        "techonologies": "Javascript, Bootstrap, Jquery"
    }
]